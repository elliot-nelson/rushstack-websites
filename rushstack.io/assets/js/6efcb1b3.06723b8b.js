"use strict";(self.webpackChunkrushstack_io=self.webpackChunkrushstack_io||[]).push([[49617],{50158:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var a=r(46393);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},p=Object.keys(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),l=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,p=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=l(r),d=n,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||p;return r?a.createElement(g,i(i({ref:t},u),{},{components:r})):a.createElement(g,i({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=r.length,i=new Array(p);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var l=2;l<p;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},78361:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var a=r(74834),n=r(28265),p=(r(46393),r(50158)),i=["components"],o={hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},s=void 0,l={unversionedId:"api/tree-pattern.treepattern.tag",id:"api/tree-pattern.treepattern.tag",isDocsHomePage:!1,title:"tree-pattern.treepattern.tag",description:"Home &gt; @rushstack/tree-pattern &gt; TreePattern &gt; tag",source:"@site/docs/api/tree-pattern.treepattern.tag.md",sourceDirName:"api",slug:"/api/tree-pattern.treepattern.tag",permalink:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treepattern.tag",editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},sidebar:"apiSidebar"},u=[{value:"TreePattern.tag() method",id:"treepatterntag-method",children:[],level:2},{value:"Parameters",id:"parameters",children:[],level:2},{value:"Remarks",id:"remarks",children:[],level:2}],c={toc:u};function m(e){var t=e.components,r=(0,n.Z)(e,i);return(0,p.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("head",null,(0,p.kt)("link",{rel:"canonical",href:"https://rushstack.io/pages/api/tree-pattern.treepattern.tag/"})),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"/rushstack-websites/rushstack.io/pages/api/index"},"Home")," ",">"," ",(0,p.kt)("a",{parentName:"p",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern"},"@rushstack/tree-pattern")," ",">"," ",(0,p.kt)("a",{parentName:"p",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treepattern"},"TreePattern")," ",">"," ",(0,p.kt)("a",{parentName:"p",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treepattern.tag"},"tag")),(0,p.kt)("h2",{id:"treepatterntag-method"},"TreePattern.tag() method"),(0,p.kt)("p",null,"Labels a subtree within the search pattern, so that the matching object can be retrieved."),(0,p.kt)("b",null,"Signature:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-typescript"},"static tag(tagName: string, subtree?: TreeNode): TreeNode;\n")),(0,p.kt)("h2",{id:"parameters"},"Parameters"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,p.kt)("th",{parentName:"tr",align:null},"Type"),(0,p.kt)("th",{parentName:"tr",align:null},"Description"))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"tagName"),(0,p.kt)("td",{parentName:"tr",align:null},"string"),(0,p.kt)("td",{parentName:"tr",align:null})),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"subtree"),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("a",{parentName:"td",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treenode"},"TreeNode")),(0,p.kt)("td",{parentName:"tr",align:null})))),(0,p.kt)("b",null,"Returns:"),(0,p.kt)("p",null,(0,p.kt)("a",{parentName:"p",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treenode"},"TreeNode")),(0,p.kt)("h2",{id:"remarks"},"Remarks"),(0,p.kt)("p",null,"Used to build the ",(0,p.kt)("inlineCode",{parentName:"p"},"pattern")," tree for ",(0,p.kt)("a",{parentName:"p",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treepattern.match"},"TreePattern.match()")," . For the given ",(0,p.kt)("inlineCode",{parentName:"p"},"subtree")," of the pattern, if it is matched, that node will be assigned to the ",(0,p.kt)("inlineCode",{parentName:"p"},"captures")," object using ",(0,p.kt)("inlineCode",{parentName:"p"},"tagName")," as the key."),(0,p.kt)("p",null,"Example:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-ts"},"const myCaptures: { personName?: string } = {};\nconst myPattern = {\n  name: TreePattern.tag('personName')\n};\nif (myPattern.match({ name: 'Bob' }, myCaptures)) {\n  console.log(myCaptures.personName);\n}\n")))}m.isMDXComponent=!0}}]);