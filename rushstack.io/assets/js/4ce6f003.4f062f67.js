"use strict";(self.webpackChunkrushstack_io=self.webpackChunkrushstack_io||[]).push([[23671],{50158:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var a=r(46393);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),o=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=o(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=o(r),h=n,k=d["".concat(l,".").concat(h)]||d[h]||c[h]||i;return r?a.createElement(k,s(s({ref:t},u),{},{components:r})):a.createElement(k,s({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:n,s[1]=p;for(var o=2;o<i;o++)s[o]=r[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},97692:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return o},toc:function(){return u},default:function(){return d}});var a=r(61731),n=r(70396),i=(r(46393),r(50158)),s=["components"],p={hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},l=void 0,o={unversionedId:"pages/api/tree-pattern",id:"pages/api/tree-pattern",title:"tree-pattern",description:"Home &gt; @rushstack/tree-pattern",source:"@site/docs/pages/api/tree-pattern.md",sourceDirName:"pages/api",slug:"/pages/api/tree-pattern",permalink:"/rushstack-websites/rushstack.io/pages/api/tree-pattern",editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,custom_edit_url:null,pagination_prev:null,pagination_next:null},sidebar:"apiSidebar"},u=[{value:"tree-pattern package",id:"tree-pattern-package",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Type Aliases",id:"type-aliases",children:[],level:2}],c={toc:u};function d(e){var t=e.components,r=(0,n.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("head",null,(0,i.kt)("link",{rel:"canonical",href:"https://rushstack.io/pages/pages/api/tree-pattern/"})),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/rushstack-websites/rushstack.io/pages/api/"},"Home")," ",">"," ",(0,i.kt)("a",{parentName:"p",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern"},"@rushstack/tree-pattern")),(0,i.kt)("h2",{id:"tree-pattern-package"},"tree-pattern package"),(0,i.kt)("p",null,"A fast, lightweight pattern matcher for tree structures such as an Abstract Syntax Tree (AST)."),(0,i.kt)("h2",{id:"classes"},"Classes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Class"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treepattern"},"TreePattern")),(0,i.kt)("td",{parentName:"tr",align:null},"A fast, lightweight pattern matcher for tree structures such as an Abstract Syntax Tree (AST).")))),(0,i.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Type Alias"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.itreepatterncaptureset"},"ITreePatternCaptureSet")),(0,i.kt)("td",{parentName:"tr",align:null},"Provides additional detail about the success or failure of ",(0,i.kt)("a",{parentName:"td",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treepattern.match"},"TreePattern.match()")," .")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treenode"},"TreeNode")),(0,i.kt)("td",{parentName:"tr",align:null},"Indicates the tree-like data structure that ",(0,i.kt)("a",{parentName:"td",href:"/rushstack-websites/rushstack.io/pages/api/tree-pattern.treepattern"},"TreePattern")," will traverse.")))))}d.isMDXComponent=!0}}]);