"use strict";(self.webpackChunkrushstack_io=self.webpackChunkrushstack_io||[]).push([[20270],{50158:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(46393);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(r),f=a,g=m["".concat(l,".").concat(f)]||m[f]||u[f]||i;return r?n.createElement(g,o(o({ref:t},p),{},{components:r})):n.createElement(g,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},35364:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var n=r(61731),a=r(70396),i=(r(46393),r(50158)),o=["components"],s={title:"Heft architecture"},l=void 0,c={unversionedId:"pages/heft/architecture",id:"pages/heft/architecture",title:"Heft architecture",description:"Terminology",source:"@site/docs/pages/heft/architecture.md",sourceDirName:"pages/heft",slug:"/pages/heft/architecture",permalink:"/rushstack-websites/rushstack.io/pages/heft/architecture",editUrl:"https://github.com/microsoft/rushstack-websites/docs/pages/heft/architecture.md",tags:[],version:"current",frontMatter:{title:"Heft architecture"},sidebar:"docsSidebar",previous:{title:"Heft introduction",permalink:"/rushstack-websites/rushstack.io/pages/heft/overview"},next:{title:"Core plugins",permalink:"/rushstack-websites/rushstack.io/pages/heft/core_plugins"}},p=[{value:"Terminology",id:"terminology",children:[],level:2}],u={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("head",null,(0,i.kt)("link",{rel:"canonical",href:"https://rushstack.io/pages/pages/heft/architecture/"})),(0,i.kt)("h2",{id:"terminology"},"Terminology"),(0,i.kt)("p",null,"The following concepts are important for understanding Heft's design:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"action")," - a Heft command-line verb (as formalized by Rush Stack's ",(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@rushstack/ts-command-line"},"ts-command-line"),' system). For example, the "test" action appears in the ',(0,i.kt)("inlineCode",{parentName:"li"},"heft test --clean")," command. Actions are the user interface, essentially macros tailored for typical developer activities."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"plugin")," - a TypeScript class that implements the ",(0,i.kt)("inlineCode",{parentName:"li"},"IHeftPlugin")," contract to provide arbitrary functionality. Plugins are loaded optionally based on Heft's configuration."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"plugin package")," - an NPM package that provides one or more Heft plugins. You can create your own NPM package that exports custom plugins for Heft to use. See ",(0,i.kt)("a",{parentName:"li",href:"/rushstack-websites/rushstack.io/pages/heft/core_plugins"},"Core Plugins")," for a list of the built-in plugins."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"hook")," - Heft leverages Webpack's ",(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/tapable"},"tapable")," system for enabling plugins to register handlers for various events during the build."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"task")," - a conceptual Heft operation that produces an output, typically by invoking some tool. For example, ",(0,i.kt)("inlineCode",{parentName:"li"},"typescript")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"eslint")," are Heft tasks. Unlike in other systems, Heft's tasks are not a formal coding contract or component; for example the ",(0,i.kt)("inlineCode",{parentName:"li"},"TypeScriptPlugin")," object implements three separate tasks (",(0,i.kt)("inlineCode",{parentName:"li"},"typescript"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"eslint"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"tslint"),") whose code is closely integrated."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"stage"),' - a larger sequence of work encompassing multiple Heft tasks. When invoking Heft, the command line typically selects a meaningful set of stages to run. The stage names are also used to group logging output. Examples of Heft stages: "clean", "build", "test"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"rig package")," - an NPM package that provides Heft configurations that can be reused across multiple projects with similar requirements See the ",(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@rushstack/rig-package"},"@rushstack/rig-package")," documentation for details about this system."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"rig profile")," - a named configuration obtained from a rig package. A single rig package can provide more than one configuration. For example, it might provide separate profiles for application projects versus library projects.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Future plans:"),' Today Rush commands can only invoke Heft actions. However, in the future we want to implement a "multiphase build" feature that will enable Rush to orchestrate more granular steps of work. For example, once a library dependency has compiled its output, Rush could start building the application before the library finishes running its unit tests. This feature will bring some additional jargon:'),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"command")," - A monorepo command-line action as defined globally in ",(0,i.kt)("a",{parentName:"li",href:"/rushstack-websites/rushjs.io/pages/configs/command-line_json/"},"command-line.json"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"phase"),' - This is similar to Heft\'s "stage", except that phases will be defined globally so that Rush can model their dependency relationships.'))))}m.isMDXComponent=!0}}]);